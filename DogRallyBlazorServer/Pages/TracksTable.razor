@page "/"
@using DogRallyBlazorServer.Services;
@using DogRallyBlazorServer.Models;
@inject IConfiguration config

@if (ShowWarning) 
{
    <Warning OnClickCallback="DismissWarning" Type=Warning.WarningType.Error Message="@ErrorMessage" />
}
@if (Tracks != null)
{ //Filtre
    <div class="row">
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="filterCreator" placeholder="Ejer navn her" @oninput="FilterTracksByCreator" />
            <label for="filterCreator">Filtrer på ejer</label>
        </div>
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="filterClass" placeholder="Klasse her" @oninput="FilterTracksByRallyClass" />
            <label for="filterClass">Filtrer på klasse</label>
        </div>
    </div>

    <div class="card-grid">
        @foreach (var track in Tracks)
        {
            <Card>
                <div class="table-responsive">
                    
                    <table class="table table-borderless mb-0">
                        <tbody>
                            <tr class="track-row">
                                <td class="centered-cell">
                                    <img class="track-image" src="@CreateWebPath(track.FileName)" />
                                </td>
                                <td>
                                    <div class="pt-2">
                                        <div class="centered-subdiv">
                                            <div class="title">Lokation</div>
                                            <div class="track-place-name">@track.PlaceName</div>
                                        </div>
                                        <div class="centered-subdiv">
                                            <div class="title">Klasse</div>
                                            <div class="track-rallyClass">@track.RallyClass.GetDisplayName()</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="pt-2">
                                        <div class="centered-subdiv">
                                            <div class="title">Udgivet den:</div>
                                            <div class="track-date">@track.Date.ToString("dd/MM/yyyy")</div>
                                        </div>
                                        <div class="centered-subdiv">
                                            <div class="title">Oprettet af:</div>
                                            <div class="track-creator">@track.CreatorName</div>
                                        </div>
                                    </div>
                                    <td class="centered-cell">
                                        <TableButton OnClickCallback="@(() => NavigatoToTrackDetail(track.TrackId))"  />
                                    </td>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </Card>
        }
    </div>
}

<style>
    .card-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between; /* Distribute items evenly */

    }

    .title {
        font-weight: bold;
        margin-bottom: 1px;
    }
    .card {
        flex: 0 0 calc(50% - 0.5rem); /* Adjust width of cards (minus half of desired gap) */
        margin-bottom: 2px; /* Add margin to bottom of cards */
        margin-top: 1px; /* Add margin to top of cards */
    }

    .track-image {
        width: 128px; /* Set width to 128px */
        height: 128px; /* Set height to 128px */
        object-fit: cover; /* Maintain aspect ratio and crop if necessary */
    }

    .form-floating {
        width: 150px;
        margin: 10px;
    }
    

</style>

@code {

    //File

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);

    }


    [Inject] private ITrackService TrackService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private List<Track>? Tracks;
    private List<Track>? TracksBackup;

    private bool ShowWarning = false;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await TrackService.GetTracks();

        if (response.StatusCode == 500)
        {
            ShowWarning = true;
            ErrorMessage = response.Message;
        }
        else
        {
            Tracks = response.Tracks;
            TracksBackup = Tracks;
        }

        Tracks = response.Tracks;
    }

    private void NavigatoToTrackDetail(int trackId)
    {
        NavigationManager.NavigateTo($"/track/{trackId}");
    }

    private void FilterTracksByCreator(ChangeEventArgs e)
    {
        Tracks = TracksBackup;
        Tracks = Tracks.Where(x => x.CreatorName.IndexOf(e.Value.ToString(), StringComparison.OrdinalIgnoreCase) >= 0).ToList();
    }

    private void FilterTracksByRallyClass(ChangeEventArgs e)
    {
        // Ensure Tracks is reset to TracksBackup before applying the filter
        Tracks = TracksBackup;

        // Get the filter value as a string
        string filterValue = e.Value.ToString();

        // Filter Tracks based on the RallyClass display name
        Tracks = Tracks.Where(x => x.RallyClass.GetDisplayName().IndexOf(filterValue, StringComparison.OrdinalIgnoreCase) >= 0).ToList();
    }

    private void DismissWarning()
    {
        ShowWarning = false;
        NavigationManager.NavigateTo($"identity/account/logout", true);
    }
}
